#include <RcppArmadillo.h>
using namespace Rcpp;

//' This function takes in a list of linear regression error variance (sigma-squared)
//' estimates generated by a Bag of Little Bootstraps procedure. Then, empirical
//' confidence intervals and point estimates of sigma-squared are determined for each
//' subsample. Afterwards, the endpoints of all confidence intervals are averaged to
//' form an overall confidence interval, and point estimates are averaged to form an
//' overall estimate. The difference between this function and s2_CI is that this
//' function is written in C++ instead of R for faster performance.
//'
//' @param lrbs A linear_reg_bs or linear_reg_bs_par object containing BLB sigma-squared
//' estimates.
//' @param alpha The significance level. Default value is 0.05.
//' @return The overall confidence interval for sigma-squared, along with its overall
//' estimate.
//' @export
//'
// [[Rcpp::depends(RcppArmadillo)]]
// [[Rcpp::export]]
NumericVector s2_CI_C(List lrbs, double alpha){
  double lowerq = alpha/2;
  double upperq = 1 - alpha/2;
  List coefs = lrbs["bootstrap_s2_estimates"];
  double lower = 0.0;
  double upper = 0.0;
  double estimates = 0.0;
  for (int i = 0; i < coefs.size(); i++){
    NumericVector subset = coefs[i];
    double sum = 0;
    for (int i = 0; i < subset.size(); i++){
      sum += subset[i];
    }
    std::sort(subset.begin(), subset.end());
    lower += subset[subset.size()*lowerq];
    upper +=  subset[subset.size()*upperq];
    estimates += sum/subset.size();
  }
  lower /= coefs.size();
  estimates /= coefs.size();
  upper /= coefs.size();
  NumericVector prediction_intervals = NumericVector::create(
    _["Lower_Bound"] = lower,
    _["Estimate"] = estimates,
    _["Upper_Bound"] = upper
  );
  return prediction_intervals;
}
